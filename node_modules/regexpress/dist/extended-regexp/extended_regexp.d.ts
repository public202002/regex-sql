export interface RegExpMatchMap {
    full_match: string;
    [key: string]: string;
}
/** Decorated JavaScript RegExp with additional methods and properties. */
export declare class ExtendedRegExp {
    private readonly pattern;
    private readonly template;
    private readonly automap;
    constructor(pattern: RegExp, template: string, automap: boolean);
    get dotAll(): boolean;
    get flags(): string;
    /** @experimental Node v16 feature */
    get hasIndices(): boolean;
    get global(): boolean;
    get ignoreCase(): boolean;
    get lastIndex(): number;
    set lastIndex(value: number);
    get multiline(): boolean;
    get source(): string;
    get sticky(): boolean;
    get unicode(): boolean;
    /** Throughput method for RegExp.exec. */
    exec(string: string): RegExpMatchArray | null;
    /** Throughput method for RegExp.test. */
    test(string: string): boolean;
    /** Throughput method for String.match.  */
    match(string: string): RegExpMatchArray | null | RegExpMatchMap;
    /** Throughput method for String.matchAll. */
    matchAll(string: string): IterableIterator<RegExpMatchArray>;
    /** Throughput method for String.replace. */
    replace(string: string, replaceValue: string): string;
    /** Throughput method for String.search. */
    search(string: string): number;
    /** Throughput method for String.split. */
    split(string: string, limit?: number | undefined): string[];
    /** Returns the template string for this pattern. */
    getTemplate(): string;
    /**
     * @experimental
     * Performs String.match(RegExp) but maps the matches to an object with the
     * pattern's template capturing groups as keys.
     *
     * For example, when given RegExpMatchArray
     * `['hello world', 'world']` with template `'greeting (region)'`,
     *  the result will be
     *  `{ full_match: 'hello world', region: 'world' }`.
     */
    matchMap(string: string): RegExpMatchMap | null;
    /**
     * @experimental
     * Maps an array of matches according to the template of the pattern.
     * Returns an object with a key for the full match and one for each capturing group in the template.
     * Called as part of `matchMap()`.
     */
    map(matches: RegExpMatchArray): RegExpMatchMap;
}
