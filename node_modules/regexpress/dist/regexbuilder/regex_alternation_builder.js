import { groupStarters, processGroupCode } from "./process_group_code.js";
import { RegexBuilderBase } from "./regex_builder_base.js";
export class RegexAlternationBuilder extends RegexBuilderBase {
    /** Joins a list of string components as regex alternates.
     *
     *       .alts(['foo','bar']) >> /foo|bar/
    */
    alts(alts) {
        alts.forEach((item, index, arr) => {
            if (item instanceof RegExp) {
                arr[index] = item.source;
            }
        });
        this.regex.parts.push(alts.join('|'));
        return this;
    }
    /** Wraps a list of string components in a regex group type and joins them with `|` to regex alternates.
     *
     *       .altGroup(['foo','bar'], 'ncg') >> /(?:foo|bar)/
    */
    altGroup(alts, groupCode) {
        const grouptype = processGroupCode(groupCode);
        this.regex.parts.push(grouptype, alts.join('|'), groupStarters.close);
        return this;
    }
    /** Wraps a list of string components in a regex group type and joins them with the provided separator.
     *
     *       .joinGroup(['foo','bar'], 'ncg', '-') >> /(?:foo-bar)/
    */
    joinGroup(vals, separator, groupCode) {
        if (groupCode) {
            const grouptype = processGroupCode(groupCode);
            this.regex.parts.push(grouptype, vals.join(separator), groupStarters.close);
        }
        else {
            this.regex.parts.push(vals.join(separator));
        }
        return this;
    }
    /**
     * @deprecated
     * Joins a list of string components with the provided separator, same as Array.join()
    */
    joinWith(vals, separator) {
        this.regex.parts.push(vals.join(separator));
        return this;
    }
}
