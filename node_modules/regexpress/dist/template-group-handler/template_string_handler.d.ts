export interface BracketPosition {
    bracket: string;
    index: number;
}
interface HandlesBrackets {
    handleBrackets(): string[];
}
export declare type Bracket = '(' | '[' | '{' | '<';
declare abstract class TemplateStringHandler {
    protected readonly template: string;
    protected readonly openingBracket: Bracket;
    protected readonly brackets: BracketPosition[];
    protected templateUnits: string[];
    protected outerUnit: string[];
    protected tier: number;
    constructor(template: string, openingBracket: Bracket);
    protected closingBracketType(): ")" | ">" | "]" | "}";
    protected extractTemplateGroups(index?: number): void;
    protected removeNestedUnit(nestedUnit: string, template: string): string;
    protected noTierChange(): boolean;
    protected finishOuterUnit(): void;
}
declare class TemplateBracketHandler extends TemplateStringHandler implements HandlesBrackets {
    /**
     * Keeps track of opening and closing parentheses to extract nested regex groups one at a time,
     * from the innermost tiers to the outermost tiers. Filters out non-capturing groups and template
     * variable symbols to return a list of groups that can be mapped directly with matches found
     * using the template's pattern.
     */
    handleBrackets(): string[];
    private clean;
}
export { TemplateBracketHandler };
