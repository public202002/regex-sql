import { PatternData, PatternSettings } from '../pattern-data/interfaces';
interface TemplateSpecification {
    compose(template: string): string;
}
interface UsesCustom {
    [key: string]: any;
}
interface SpecificationData extends UsesCustom {
    settings: PatternSettings;
    vars: PatternData;
}
declare abstract class SpecificationBase {
    protected readonly data: SpecificationData;
    protected var_symbol: string;
    constructor(data: SpecificationData);
    protected buildLogic(templateParts: string[]): string;
    protected buildVar(val: string[] | string): string;
}
declare class DefaultSpecification extends SpecificationBase implements TemplateSpecification {
    protected readonly data: SpecificationData;
    constructor(data: SpecificationData);
    compose(template: string): string;
    protected buildLogic(templateParts: string[]): string;
    protected subPlaceholder(group: string): string;
}
declare class SimpleSpecification extends SpecificationBase implements TemplateSpecification {
    protected readonly data: SpecificationData;
    constructor(data: SpecificationData);
    compose(template: string): string;
}
export type { TemplateSpecification, SpecificationData };
export { DefaultSpecification, SimpleSpecification };
