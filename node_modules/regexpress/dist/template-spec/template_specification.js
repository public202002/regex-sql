import { toList } from "../utils/to_list.js";
class SpecificationBase {
    constructor(data) {
        var _a;
        this.data = data;
        this.var_symbol = (_a = this.data.settings.symbol) !== null && _a !== void 0 ? _a : '';
    }
    buildLogic(templateParts) {
        const escape = /^\\/;
        return templateParts.map(t => {
            if (escape.test(t))
                return t.replace(escape, '');
            const key = t.replace(new RegExp(`^${this.var_symbol}`), '');
            const values = this.data.vars[key];
            if (!values)
                return t;
            return this.buildVar(values);
        }).join('');
    }
    buildVar(val) {
        return toList(val).join(this.data.settings.separator || '|');
    }
}
class DefaultSpecification extends SpecificationBase {
    constructor(data) {
        super(data);
        this.data = data;
    }
    compose(template) {
        const keys = Object.keys(this.data.vars).join('|');
        const parts = template.split(new RegExp(`([\\\\]?${this.var_symbol}(?:${keys}))`));
        return this.buildLogic(parts);
    }
    buildLogic(templateParts) {
        const escape = /^\\/;
        return templateParts.map(t => {
            if (escape.test(t))
                return t.replace(escape, '');
            const key = t.replace(new RegExp(`^${this.var_symbol}`), '');
            const values = this.data.vars[key];
            if (!values)
                return t;
            return this.subPlaceholder(this.buildVar(values));
        }).join('');
    }
    subPlaceholder(group) {
        return group.replace(/(?<!\\)\{\{(\w+)\}\}/g, (match, name) => {
            if (!this.data.placeholders[name]) {
                console.warn(`(regexbuilder) Warning: undefined placeholder "${name}" in regex data`);
                return match;
            }
            return this.buildVar(this.data.placeholders[name]);
        });
    }
}
class SimpleSpecification extends SpecificationBase {
    constructor(data) {
        super(data);
        this.data = data;
    }
    compose(template) {
        const keys = Object.keys(this.data.vars).join('|');
        const parts = template.split(new RegExp(`([\\\\]?${this.var_symbol}(?:${keys}))`));
        return this.buildLogic(parts);
    }
}
export { DefaultSpecification, SimpleSpecification };
